<?php
// shell_detector.php

// Aktifkan pelaporan error untuk debugging (nonaktifkan di produksi)
error_reporting(E_ALL);
ini_set('display_errors', 1);
// Set waktu eksekusi maksimum 300 detik (5 menit) untuk scan folder besar
ini_set('max_execution_time', 300);

/**
 * Fungsi untuk mendeteksi potensi shell backdoor dalam sebuah file.
 * Menggunakan berbagai pola regex untuk mencari fungsi berbahaya, teknik obfuscasi, dll.
 *
 * @param string $file_path Jalur lengkap ke file yang akan dipindai.
 * @param array $detected_reasons Referensi ke array yang akan diisi dengan alasan deteksi.
 * @param int $total_score Referensi ke integer yang akan diisi dengan total skor bahaya.
 * @return bool True jika terdeteksi sebagai shell backdoor, false jika tidak.
 */
function is_shell_backdoor($file_path, &$detected_reasons = [], &$total_score = 0) {
    // Pastikan file ada dan bisa dibaca
    if (!file_exists($file_path) || !is_readable($file_path)) {
        return false;
    }

    $content = file_get_contents($file_path);
    if ($content === false) {
        return false; // Gagal membaca file
    }

    // Definisi bobot (severity) untuk setiap keyword/pola deteksi
    // Semakin tinggi nilainya, semakin berbahaya
    // Bobot disesuaikan untuk prioritas 'eval', 'session_start', 'error_log', 'string_concatenation'
    $severity_scores = [
        'eval'                      => 1000, // <<-- PRIORITAS TERTINGGI!
        'assert'                    => 950,  // Hampir setara dengan eval
        'session_start'             => 800,  // <<-- PRIORITAS KEDUA
        'error_log'                 => 700,  // <<-- PRIORITAS KETIGA
        'string_concatenation'      => 650,  // <<-- DETEKSI BARU, NILAI TINGGI
        'eval_curl_remote'          => 600, // Masih sangat tinggi, tapi di bawah prioritas utama Anda
        'system'                    => 90,
        'passthru'                  => 85,
        'shell_exec'                => 80,
        'exec'                      => 80,
        'proc_open'                 => 75,
        'popen'                     => 70,
        'pcntl_exec'                => 70,
        'create_function'           => 60,
        'curl_exec'                 => 50,
        'curl_init'                 => 45,
        'fsockopen'                 => 40,
        'pfsockopen'                => 40,
        'stream_socket_client'      => 40,
        'base64_decode'             => 30, // Obfuscation, bisa jadi bagian dari backdoor
        'gzinflate'                 => 30,
        'str_rot13'                 => 25,
        'hex2bin'                   => 25,
        'preg_replace_e'            => 80, // Spesifik untuk preg_replace dengan modifier /e
        'get'                       => 60, // Penggunaan superglobal GET
        'post'                      => 60, // Penggunaan superglobal POST
        'request'                   => 60, // Penggunaan superglobal REQUEST
        'phpinfo'                   => 20,
        'ini_set'                   => 35,
        'mkdir'                     => 30,
        'chmod'                     => 35,
        'rename'                    => 25,
        'unlink'                    => 50,
        'rmdir'                     => 50,
        'move_uploaded_file'        => 40,
        'file_put_contents'         => 65,
        'webroot_pass'              => 90, // String khas shell
        'c99shell'                  => 100, // Nama shell terkenal
        'r57shell'                  => 100, // Nama shell terkenal
        'wso'                       => 100, // Nama shell terkenal
        'alfa'                      => 95,  // Nama shell terkenal
        'backdoor'                  => 90,  // Keyword langsung
        'goto'                      => 40,  // Obfuscation
        'declare'                   => 50,  // Obfuscation dengan eval
        'define_eval'               => 70,  // define dengan eval
        'extract'                   => 55,  // Dynamic var creation from user input
        'parse_str'                 => 55,
        'mb_convert_encoding'       => 30,  // Obfuscation
        'dynamic_call'              => 40,  // Panggilan fungsi dinamis umum
        'hex_obfuscation'           => 30,  // \xNN obfuscation
        'double_extension'          => 20, // File dengan ekstensi ganda (e.g., .jpg.php)
    ];

    // Definisi pola deteksi yang dikelompokkan
    $pattern_groups = [
        'Highest Priority Indicators' => [
            '/\b(eval|assert)\s*\(.*?\)/i', // eval dan assert
            '/\b(session_start)\s*\(/i',    // session_start
            '/\b(error_log)\s*\(/i',        // error_log
        ],
        'Suspicious String Concatenation' => [
            '/(?:[\'"][^\'"]+[\'"]|\$[a-zA-Z_]\w*)(?:\s*\.\s*(?:[\'"][^\'"]+[\'"]|\$[a-zA-Z_]\w*))+\s*(\(|\;)/i',
            '/\b(?:eval|assert)\s*\(\s*(\$[a-zA-Z_]\w*|[\'"][^\'"]*?[\'"])\s*\.\s*(\$[a-zA-Z_]\w*|[\'"][^\'"]*?[\'"])/i',
        ],
        'Critical Remote Code Execution' => [
            '/\b(?:eval|assert)\s*\(\s*(?:curl_exec|file_get_contents|ob_get_contents)\s*\(\s*[\'"]https?:\/\/[^\'"]+[\'"]\s*\)/i',
            '/\b(?:eval|assert)\s*\(\s*\$[a-zA-Z0-9_]+\s*(?:\s*=\s*|\s*\().*?(?:curl_init|file_get_contents)\s*\(.*?(?:[\'"]https?:\/\/[^\'"]+[\'"]|\$[a-zA-Z0-9_]+)\s*\)/is',
        ],
        'Dangerous Functions' => [
            '/\b(system|passthru|shell_exec|exec|proc_open|popen|pcntl_exec|create_function|curl_exec|curl_init|fsockopen|pfsockopen|stream_socket_client)\s*\(/i',
        ],
        'Obfuscation/Encoding' => [
            '/\b(base64_decode|gzinflate|str_rot13|hex2bin)\s*\(\s*[\'"]([a-zA-Z0-9+\/=\s]+)[\'"]\s*\)/i',
            '/(gzinflate|str_rot13|base64_decode)\s*\(\s*(\'|")[a-zA-Z0-9\+\/=\s]+(\'|")\s*\)/i',
            '/\bpreg_replace\s*\(.*?,.*?,\s*.*?\s*,\s*.*?,\s*[\'"]\S*?e[\'"]\s*\)/is',
            '/\b(?:array_map|array_filter|array_walk|call_user_func(?:_array)?)\s*\(.*?(?:eval|assert|system|passthru|shell_exec).*?\)/is',
        ],
        'Dynamic Code Execution (Superglobals)' => [
            '/(?:eval|assert|system|passthru|shell_exec|exec|proc_open|popen)\s*\(\s*(\$_GET|\$_POST|\$_REQUEST|file_get_contents)\s*\[\s*[\'"]\w+[\'"]\s*\]\s*\)/i',
        ],
        'File System Manipulation' => [
            '/\b(phpinfo|ini_set|error_reporting|mkdir|chmod|rename|unlink|rmdir|move_uploaded_file|file_put_contents)\b/i',
        ],
        'Common Shell Keywords' => [
            '/webroot_pass/i',
            '/c99shell|r57shell|wso|alfa|backdoor/i',
        ],
        'Advanced Patterns' => [
            '/\$(\w+)\s*=\s*new\s*ReflectionFunction\(\s*[\'"]\w+[\'"]\s*\);/i',
            '/\$[a-zA-Z0-9_]+\s*=\s*[\'"](?:\w+\s*){5,}eval\s*[\'"]\s*;/i',
            '/\<\?php\s*require_once\s*__DIR__\s*\.\s*[\'"]\.\/shell\.php[\'"]/i',
            '/(\$[\w_]+\s*=\s*)?array\s*\([\s\S]*?(eval|assert|system|passthru|shell_exec|exec|proc_open|popen|pcntl_exec|curl_exec|curl_init)\s*[\S\s]*?\)/i',
            '/\$[a-zA-Z0-9_]+\s*=\s*create_function\(\s*[\'"].*?[\'"],\s*[\'"].*?(eval|assert|system|passthru|shell_exec|exec|proc_open|popen|pcntl_exec|curl_init|curl_exec).*?[\'"]\s*\)/i',
        ],
        'Advanced Obfuscation/PHP 7+ Features' => [
            '/\b(goto)\s+[\w_]+\s*;/i',
            '/declare\s*\(.*?strict_types\s*=\s*1.*?\)\s*;?\s*eval\s*\(/i',
            '/define\s*\(\s*[\'"][^\'"]*?[^a-zA-Z0-9_][^\'"]*?[\'"]\s*,\s*.*?eval\s*\(/i',
            '/\b(extract|parse_str|mb_convert_encoding)\s*\(\s*\$_[GET|POST|REQUEST]/i',
            '/\$[a-zA-Z0-9_]+\s*=\s*\$[a-zA-Z0-9_]+\s*\(\s*\$[a-zA-Z0-9_]+\s*\)/i',
            '/\\x[0-9a-f]{2}/i',
        ],
    ];

    $detected_reasons = [];
    $total_score = 0;
    $is_detected = false;

    $reportable_keywords = array_keys($severity_scores);

    foreach ($pattern_groups as $group_name => $patterns) {
        foreach ($patterns as $pattern) {
            if (preg_match_all($pattern, $content, $matches)) {
                $is_detected = true;
                foreach ($matches[0] as $match) {
                    if ($group_name === 'Highest Priority Indicators') {
                        if (preg_match('/\b(eval|assert)\b/i', $match, $func_match)) {
                             $keyword = strtolower($func_match[1]);
                             if (isset($severity_scores[$keyword])) {
                                $detected_reasons[] = $keyword;
                                $total_score += $severity_scores[$keyword];
                            }
                        } elseif (preg_match('/\b(session_start)\b/i', $match, $func_match)) {
                             $keyword = strtolower($func_match[1]);
                             if (isset($severity_scores[$keyword])) {
                                $detected_reasons[] = $keyword;
                                $total_score += $severity_scores[$keyword];
                            }
                        } elseif (preg_match('/\b(error_log)\b/i', $match, $func_match)) {
                             $keyword = strtolower($func_match[1]);
                             if (isset($severity_scores[$keyword])) {
                                $detected_reasons[] = $keyword;
                                $total_score += $severity_scores[$keyword];
                            }
                        }
                    }
                    elseif ($group_name === 'Suspicious String Concatenation') {
                         $detected_reasons[] = 'string_concatenation';
                         $total_score += $severity_scores['string_concatenation'];
                    }
                    elseif ($group_name === 'Critical Remote Code Execution') {
                        $detected_reasons[] = 'eval_curl_remote';
                        $total_score += $severity_scores['eval_curl_remote'];
                    }
                    elseif (preg_match('/\bpreg_replace\s*\(.*?,.*?,\s*.*?\s*,\s*.*?,\s*[\'"]\S*?e[\'"]\s*\)/is', $match)) {
                         $detected_reasons[] = 'preg_replace_e';
                         $total_score += $severity_scores['preg_replace_e'];
                    } elseif (preg_match('/define\s*\(\s*[\'"][^\'"]*?[^a-zA-Z0-9_][^\'"]*?[\'"]\s*,\s*.*?eval\s*\(/i', $match)) {
                        $detected_reasons[] = 'define_eval';
                        $total_score += $severity_scores['define_eval'];
                    } elseif (preg_match('/\\x[0-9a-f]{2}/i', $match)) {
                         $detected_reasons[] = 'hex_obfuscation';
                         $total_score += $severity_scores['hex_obfuscation'];
                    }
                    elseif (preg_match('/(?:eval|assert|system|passthru|shell_exec|exec|proc_open|popen)\s*\(\s*(\$_GET|\$_POST|\$_REQUEST)/i', $match, $sg_match)) {
                        $keyword = strtolower(str_replace('$_', '', $sg_match[1]));
                        if (isset($severity_scores[$keyword])) {
                            $detected_reasons[] = $keyword;
                            $total_score += $severity_scores[$keyword];
                        }
                        if (!in_array('eval', $detected_reasons) && !in_array('assert', $detected_reasons)) {
                            if (preg_match('/\b(system|passthru|shell_exec|exec|proc_open|popen)\b/i', $match, $func_match)) {
                                $func_keyword = strtolower($func_match[1]);
                                 if (isset($severity_scores[$func_keyword])) {
                                    $detected_reasons[] = $func_keyword;
                                    $total_score += $severity_scores[$func_keyword];
                                }
                            }
                        }
                    }
                    else {
                        foreach ($reportable_keywords as $keyword) {
                            if (preg_match('/\b' . preg_quote($keyword, '/') . '\b/i', $match)) {
                                if (isset($severity_scores[$keyword])) {
                                    $detected_reasons[] = strtolower($keyword);
                                    $total_score += $severity_scores[$keyword];
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    $detected_reasons = array_unique($detected_reasons);
    $detected_reasons = array_slice($detected_reasons, 0, 5);

    return $is_detected;
}

/**
 * Fungsi rekursif untuk memindai direktori dan subdirektorinya.
 *
 * @param string $dir Direktori yang akan dipindai.
 * @param array $results Referensi ke array untuk menyimpan hasil deteksi.
 */
function scan_directory($dir, &$results) {
    if (!is_dir($dir) || !is_readable($dir)) {
        return;
    }

    $files = scandir($dir);
    if ($files === false) {
        return;
    }

    $php_extensions = [
        'php', 'phtml', 'phpt', 'php3', 'php4', 'php5', 'php6', 'php7', 'php8', 'inc', 'shtml'
    ];
    $case_insensitive_php_extensions = [];
    foreach ($php_extensions as $ext) {
        $case_insensitive_php_extensions[] = $ext;
        $case_insensitive_php_extensions[] = strtoupper($ext);
        $case_insensitive_php_extensions[] = ucfirst($ext);
    }
    $case_insensitive_php_extensions = array_unique($case_insensitive_php_extensions);


    foreach ($files as $file) {
        if ($file === '.' || $file === '..') {
            continue;
        }

        $path = realpath($dir . DIRECTORY_SEPARATOR . $file);
        if ($path === false) {
            continue;
        }

        if (is_dir($path)) {
            scan_directory($path, $results);
        }
        else if (is_file($path)) {
            $file_name = basename($path);
            $file_ext = pathinfo($path, PATHINFO_EXTENSION);
            
            $is_potential_php_file = false;
            $initial_reasons = [];
            
            if (substr_count($file_name, '.') > 1) {
                $parts = explode('.', $file_name);
                $last_ext = strtolower(end($parts));
                if (in_array($last_ext, $php_extensions)) {
                    $is_potential_php_file = true;
                    $initial_reasons[] = 'double_extension';
                }
            }

            if (in_array(strtolower($file_ext), $php_extensions) || in_array($file_ext, $case_insensitive_php_extensions)) {
                 $is_potential_php_file = true;
            }

            if ($is_potential_php_file) {
                $reasons_from_detector = [];
                $score_from_detector = 0;

                if (is_shell_backdoor($path, $reasons_from_detector, $score_from_detector)) {
                    if (in_array('double_extension', $initial_reasons) && !in_array('double_extension', $reasons_from_detector)) {
                        $reasons_from_detector[] = 'double_extension';
                        $score_from_detector += (isset($GLOBALS['severity_scores']['double_extension']) ? $GLOBALS['severity_scores']['double_extension'] : 0);
                    }
                    
                    $final_reasons = array_unique(array_merge($initial_reasons, $reasons_from_detector));
                    $final_score = $score_from_detector;

                    $results[] = [
                        'path' => $path, 
                        'reasons' => $final_reasons,
                        'score' => $final_score
                    ];
                }
            }
        }
    }
}

// --- Proses Permintaan AJAX (View Code dan Delete) ---
if (isset($_GET['action'])) {
    $action = $_GET['action'];
    $file = isset($_GET['file']) ? base64_decode($_GET['file']) : '';

    $file = realpath($file);

    if (empty($file) || !file_exists($file)) {
        echo json_encode(['status' => 'error', 'message' => 'File not found or invalid path.']);
        exit;
    }

    if ($action === 'view_code') {
        if (is_readable($file)) {
            highlight_string(file_get_contents($file));
        } else {
            echo json_encode(['status' => 'error', 'message' => 'Cannot read file. Permission denied.']);
        }
        exit;
    } elseif ($action === 'delete') {
        if (unlink($file)) {
            echo json_encode(['status' => 'success', 'message' => 'File deleted successfully.']);
        } else {
            echo json_encode(['status' => 'error', 'message' => 'Failed to delete file. Permission denied or file not found.']);
        }
        exit;
    }
}

// --- Proses Scan Ketika Form Disubmit ---
$scan_path = isset($_POST['scan_path']) ? trim($_POST['scan_path']) : '';
$scan_results = [];
$scan_error = '';

if ($_SERVER['REQUEST_METHOD'] === 'POST' && !empty($scan_path)) {
    $scan_path = realpath($scan_path);

    if ($scan_path === false || !is_dir($scan_path)) {
        $scan_error = "Invalid or inaccessible directory: " . htmlspecialchars($_POST['scan_path']);
    } else {
        $start_time = microtime(true);
        scan_directory($scan_path, $scan_results);
        $end_time = microtime(true);
        $execution_time = round($end_time - $start_time, 2);

        usort($scan_results, function($a, $b) {
            return $b['score'] <=> $a['score'];
        });
    }
}

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PHP Shell Backdoor Detector</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #2c3e50;
            --light-blue: #34495e;
            --accent-green: #27ae60;
            --accent-red: #e74c3c;
            --accent-orange: #f39c12;
            --text-dark: #34495e;
            --text-light: #ecf0f1;
            --bg-light: #f8f9fa;
            --bg-white: #ffffff;
            --border-color: #e0e0e0;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--bg-light);
            margin: 0;
            padding: 20px;
            color: var(--text-dark);
            line-height: 1.6;
        }

        .container {
            background-color: var(--bg-white);
            padding: 30px 40px;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            max-width: 960px;
            margin: 30px auto;
            overflow: hidden;
        }

        h1 {
            color: var(--primary-blue);
            text-align: center;
            margin-bottom: 35px;
            font-weight: 700;
            font-size: 2.2em;
            letter-spacing: -0.5px;
        }

        .disclaimer {
            background-color: #fff3cd; /* Warna kuning lembut */
            border: 1px solid #ffeeba;
            padding: 18px 25px;
            border-radius: 8px;
            margin-bottom: 25px;
            color: #856404;
            font-size: 0.95em;
            line-height: 1.5;
        }
        .disclaimer h3 {
            color: #7a5a02;
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 1.1em;
            font-weight: 600;
        }
        .disclaimer ul {
            margin-left: 20px;
            padding-left: 0;
            list-style-type: disc;
        }
        .disclaimer li {
            margin-bottom: 5px;
        }

        .form-group {
            margin-bottom: 25px;
        }
        label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: var(--light-blue);
            font-size: 1.05em;
        }
        input[type="text"] {
            width: calc(100% - 24px); /* Account for padding and border */
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 1em;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            box-sizing: border-box; /* Include padding and border in the element's total width and height */
        }
        input[type="text"]:focus {
            border-color: var(--accent-blue);
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
            outline: none;
        }

        button {
            background-color: var(--accent-green);
            color: var(--text-light);
            padding: 12px 25px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1.05em;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 10px rgba(39, 174, 96, 0.2);
        }
        button:hover {
            background-color: #229954; /* Slightly darker green */
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
        }

        .results {
            margin-top: 35px;
            border-top: 1px solid var(--border-color);
            padding-top: 25px;
        }
        .results h2 {
            color: var(--accent-red);
            text-align: center;
            margin-bottom: 25px;
            font-weight: 700;
            font-size: 1.8em;
        }
        .result-count {
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.1em;
            color: var(--light-blue);
        }
        .result-count strong {
            color: var(--accent-red);
        }

        .result-item {
            background-color: #fcecec; /* Merah muda sangat lembut */
            border: 1px solid #ebc2c2; /* Border merah muda */
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        .result-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
        }

        .result-item .path-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }
        .result-item span.file-path {
            flex-grow: 1;
            font-weight: 600;
            color: var(--text-dark);
            word-break: break-all;
            font-size: 1.1em;
        }
        .result-item .actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        .result-item button {
            padding: 8px 15px;
            font-size: 0.9em;
            min-width: 100px;
        }
        .result-item .view-btn {
            background-color: var(--accent-green);
        }
        .result-item .view-btn:hover {
            background-color: #218838;
        }
        .result-item .delete-btn {
            background-color: var(--accent-red);
        }
        .result-item .delete-btn:hover {
            background-color: #c82333;
        }
        .result-item .reasons {
            font-size: 0.9em;
            color: #a04040; /* Merah lebih gelap untuk alasan */
            padding-left: 15px;
            border-left: 4px solid var(--accent-red);
            margin-top: 5px;
            line-height: 1.4;
        }

        .no-results {
            text-align: center;
            color: #6c757d;
            padding: 30px;
            border: 2px dashed #b0c4de;
            border-radius: 8px;
            background-color: #e9f5ff; /* Biru muda */
            font-size: 1.1em;
        }
        .error-message {
            color: var(--accent-red);
            font-weight: 600;
            text-align: center;
            margin-bottom: 25px;
            background-color: #ffebee;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #dc3545;
        }

        /* Modal Styles */
        #viewCodeModal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.6);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            animation: fadeIn 0.3s forwards;
        }
        .modal-content {
            background-color: var(--bg-white);
            margin: 8% auto;
            padding: 30px;
            border-radius: 10px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            animation: slideInTop 0.3s forwards;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 32px;
            font-weight: bold;
            transition: color 0.3s ease;
            cursor: pointer;
        }
        .close-button:hover,
        .close-button:focus {
            color: var(--text-dark);
        }
        .modal-content h3 {
            color: var(--primary-blue);
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 1.5em;
            font-weight: 600;
            padding-right: 30px; /* Space for close button */
        }
        pre {
            background-color: #f0f4f7; /* Abu-abu biru muda */
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: 'Consolas', 'Monaco', 'Lucida Console', monospace;
            font-size: 0.95em;
            border: 1px solid #dcdcdc;
            max-height: 60vh; /* Batasi tinggi untuk scroll */
        }

        .waduh-tag {
            background-color: var(--accent-orange); /* Warna kuning-oranye */
            color: var(--text-dark);
            padding: 4px 10px;
            border-radius: 5px;
            font-weight: 700;
            margin-left: 10px;
            font-size: 0.8em;
            animation: pulse 1s infinite;
            display: inline-block; /* Agar padding dan margin berfungsi baik */
            box-shadow: 0 0 0 0 rgba(243, 156, 18, 0.4);
        }

        /* Keyframes for animations */
        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(243, 156, 18, 0.4);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(243, 156, 18, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(243, 156, 18, 0);
            }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideInTop {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .container {
                padding: 20px 25px;
                margin: 20px auto;
            }
            h1 {
                font-size: 1.8em;
                margin-bottom: 25px;
            }
            .result-item .path-info {
                flex-direction: column;
                align-items: flex-start;
            }
            .result-item .actions {
                width: 100%;
                justify-content: flex-start;
            }
            .result-item button {
                width: calc(50% - 4px); /* Two buttons per row */
            }
            .modal-content {
                width: 95%;
                margin: 5% auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>PHP Shell Backdoor Detector</h1>

        <div class="disclaimer">
            <h3>Peringatan Penting:</h3>
            <ul>
                <li>Deteksi ini bersifat **heuristik** dan **tidak 100% akurat**. Mungkin ada *false positive* (file normal terdeteksi) atau *false negative* (backdoor tidak terdeteksi).</li>
                <li>Fitur **delete** bersifat **permanen**. Pastikan Anda yakin sebelum menghapus file. Sangat disarankan untuk melakukan **backup** terlebih dahulu.</li>
                <li>Gunakan script ini dengan bertanggung jawab dan hanya pada server yang Anda miliki atau memiliki izin untuk memindai.</li>
                <li>Setelah digunakan, **hapus script ini** dari server Anda untuk keamanan.</li>
            </ul>
        </div>

        <form method="POST" action="">
            <div class="form-group">
                <label for="scan_path">Path yang ingin di-scan (contoh: `/var/www/html` atau `.` untuk direktori saat ini):</label>
                <input type="text" id="scan_path" name="scan_path" value="<?= htmlspecialchars($scan_path ?: getcwd()) ?>" placeholder="Masukkan path direktori..." required>
            </div>
            <button type="submit">Scan Sekarang</button>
        </form>

        <?php if (!empty($scan_error)): ?>
            <div class="error-message">
                <?= $scan_error ?>
            </div>
        <?php endif; ?>

        <?php if ($_SERVER['REQUEST_METHOD'] === 'POST' && empty($scan_error)): ?>
            <div class="results">
                <h2>Hasil Scan:</h2>
                <?php if (empty($scan_results)): ?>
                    <div class="no-results">
                        🎉 Tidak ada potensi shell backdoor yang terdeteksi di jalur ini. Server Anda kemungkinan bersih.
                    </div>
                <?php else: ?>
                    <p class="result-count">Ditemukan **<span style="color: var(--accent-red); font-weight: bold;"><?= count($scan_results) ?></span>** potensi shell backdoor (Waktu eksekusi: **<?= $execution_time ?> detik**):</p>
                    <?php 
                    $waduh_threshold = 650; // Ambang batas skor untuk menandai "Waduh!"
                    ?>
                    <?php foreach ($scan_results as $item): ?>
                        <div class="result-item" id="file-<?= md5($item['path']) ?>">
                            <div class="path-info">
                                <span class="file-path">
                                    <?= htmlspecialchars($item['path']) ?>
                                    <?php if ($item['score'] >= $waduh_threshold): ?>
                                        <span class="waduh-tag">Waduh!</span>
                                    <?php endif; ?>
                                </span>
                                <div class="actions">
                                    <button class="view-btn" onclick="viewCode('<?= base64_encode($item['path']) ?>')">View Code</button>
                                    <button class="delete-btn" onclick="deleteFile('<?= base64_encode($item['path']) ?>', '<?= md5($item['path']) ?>')">Delete</button>
                                </div>
                            </div>
                            <?php if (!empty($item['reasons'])): ?>
                                <div class="reasons">
                                    (Terdeteksi: **<?= implode(', ', $item['reasons']) ?>** | Skor: <?= $item['score'] ?>)
                                </div>
                            <?php endif; ?>
                        </div>
                    <?php endforeach; ?>
                <?php endif; ?>
            </div>
        <?php endif; ?>
    </div>

    <div id="viewCodeModal" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h3>Content of <span id="modalFilePath"></span></h3>
            <pre id="modalCodeContent"></pre>
        </div>
    </div>

    <script>
        var modal = document.getElementById("viewCodeModal");
        var span = document.getElementsByClassName("close-button")[0];

        span.onclick = function() {
            modal.style.display = "none";
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        function viewCode(encodedFilePath) {
            const filePath = atob(encodedFilePath);
            document.getElementById('modalFilePath').innerText = filePath;
            document.getElementById('modalCodeContent').innerHTML = 'Loading code...';

            fetch(`?action=view_code&file=${encodedFilePath}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('modalCodeContent').innerHTML = html;
                    modal.style.display = "block";
                })
                .catch(error => {
                    console.error('Error fetching code:', error);
                    document.getElementById('modalCodeContent').innerText = 'Error loading code.';
                });
        }

        function deleteFile(encodedFilePath, elementId) {
            if (confirm('Apakah Anda yakin ingin menghapus file ini secara permanen? Tindakan ini tidak dapat dibatalkan!')) {
                fetch(`?action=delete&file=${encodedFilePath}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            alert(data.message);
                            const elementToRemove = document.getElementById(`file-${elementId}`);
                            if (elementToRemove) {
                                elementToRemove.parentNode.removeChild(elementToRemove);
                            }
                        } else {
                            alert('Gagal menghapus file: ' + data.message + '. Pastikan script ini memiliki izin tulis (write permission) pada file tersebut.');
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting file:', error);
                        alert('Terjadi kesalahan saat menghapus file.');
                    });
            }
        }
    </script>
</body>
</html>